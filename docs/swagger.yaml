basePath: /
definitions:
  handler.Response:
    properties:
      code:
        type: integer
      data:
        type: object
      message:
        type: string
    type: object
  model.UserInfo:
    properties:
      createdAt:
        type: string
      id:
        type: integer
      password:
        type: string
      sayHello:
        type: string
      updatedAt:
        type: string
      username:
        type: string
    type: object
  user.CreateRequest:
    properties:
      captchaId:
        type: string
      captchaValue:
        type: string
      email:
        type: string
      group:
        type: integer
      id:
        type: integer
      id_card:
        type: string
      is_super:
        type: boolean
      nickname:
        type: string
      oldPassword:
        type: string
      password:
        type: string
      picture:
        type: string
      state:
        type: integer
      username:
        type: string
      users:
        items:
          type: integer
        type: array
    type: object
  user.CreateResponse:
    properties:
      username:
        type: string
    type: object
  user.ListRequest:
    properties:
      limit:
        type: integer
      offset:
        type: integer
      username:
        type: string
    type: object
  user.SwaggerListResponse:
    properties:
      totalCount:
        type: integer
      userList:
        items:
          $ref: '#/definitions/model.UserInfo'
        type: array
    type: object
host: localhost:8083
info:
  contact:
    email: yljckh@gmail.com
    name: yeelone
    url: https://www.tdongli.com
  description: hr-server
  title: hr-server API
  version: "1.0"
paths:
  /api/login:
    post:
      parameters:
      - description: Username
        in: body
        name: username
        required: true
        schema:
          type: string
      - description: Password
        in: body
        name: password
        required: true
        schema:
          type: string
      - description: CaptchaId
        in: body
        name: CaptchaId
        required: true
        schema:
          type: string
      - description: CaptchaValue
        in: body
        name: CaptchaValue
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":0,"message":"OK","data":{"token":""}}'
          schema:
            type: string
      summary: Login generates the authentication token
  /user:
    get:
      consumes:
      - application/json
      description: 列出所有用户列表
      parameters:
      - description: List users
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/user.ListRequest'
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":0,"message":"OK","data":{"totalCount":1,"userList":[{"id":0,"username":"admin","random":"user
            ''admin'' get random string ''EnqntiSig''","password":"$2a$10$veGcArz47VGj7l9xN7g2iuT9TF21jLI1YGXarGzvARNdnt4inC9PG","createdAt":"2018-05-28
            00:25:33","updatedAt":"2018-05-28 00:25:33"}]}}'
          schema:
            $ref: '#/definitions/user.SwaggerListResponse'
      summary: List the users in the database
      tags:
      - user
    post:
      consumes:
      - application/json
      description: Add a new user
      parameters:
      - description: Create a new user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/user.CreateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":0,"message":"OK","data":{"username":"kong"}}'
          schema:
            $ref: '#/definitions/user.CreateResponse'
      summary: Add new user to the database
      tags:
      - user
  /user/{id}:
    delete:
      consumes:
      - application/json
      description: Delete user by ID
      parameters:
      - description: The user's database id index num
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":0,"message":"OK","data":null}'
          schema:
            $ref: '#/definitions/handler.Response'
      summary: Delete an user by the user identifier
      tags:
      - user
  /v1/sd/cpu:
    get:
      consumes:
      - application/json
      description: Checks the cpu usage
      produces:
      - application/json
      responses:
        "200":
          description: 'CRITICAL - Load average: 1.78, 1.99, 2.02 | Cores: 2'
          schema:
            type: string
      summary: Checks the cpu usage
      tags:
      - sd
  /v1/sd/disk:
    get:
      consumes:
      - application/json
      description: Checks the disk usage
      produces:
      - application/json
      responses:
        "200":
          description: 'OK - Free space: 17233MB (16GB) / 51200MB (50GB) | Used: 33%'
          schema:
            type: string
      summary: Checks the disk usage
      tags:
      - sd
  /v1/sd/health:
    get:
      consumes:
      - application/json
      description: Shows OK as the ping-pong result
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Shows OK as the ping-pong result
      tags:
      - sd
  /v1/sd/ram:
    get:
      consumes:
      - application/json
      description: Checks the ram usage
      produces:
      - application/json
      responses:
        "200":
          description: 'OK - Free space: 402MB (0GB) / 8192MB (8GB) | Used: 4%'
          schema:
            type: string
      summary: Checks the ram usage
      tags:
      - sd
swagger: "2.0"
